/*
  Notes:
  https://adventofcode.com/2020/day/18

  * bad: 36382392389406
  * ...but then resubmitted same value, after evaluating on local, ... and it worked?
    did I see an extra ...'f' at the end of the string in their 'you fail' response?

*/

// const stateInit = {};
// const puzzleInput = document.body.innerText;
const stateInit = {
  expected: 71 + 51 + 26 + 437 + 12240 + 13632,
};
const puzzleInput = `
1 + 2 * 3 + 4 * 5 + 6
1 + (2 * 3) + (4 * (5 + 6))
2 * 3 + (4 * 5)
5 + (8 * 3 + 9 + 3 * 4 * 3)
5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))
((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2
`;
// const stateInit = {};
// const puzzleInput = `
// 2 + ((6 * 6 + 4 + 3 * 4) + (4 + 3 + 5) * 3 * ( 5 * 6 + 5 * 3 +6)) * 2 + 3 * (6 * (4 + 4 * 4) * 2 * 3 * 8)
// 6 * 3 + 5 * ((9 * 9 + 3) + (2 + 5 * 6 + 4)) + 7 + 9
// 7 * 3 + 8 + 8 * 4 * (4 * (7 * 4) + 9 * 5)
// 3 * 4 + 8 + 5
// 8 + (8 + (3 + 6) * 9 + 9 * 5) * ((5 + 9 * 7 * 3) * 4 * 5) + 6 + 9
// ((2 * 9 + 4 + 5) * 5) + 2
// (4 * 8 * 5 * 7) * 2 * ((3 + 9 + 8) * 9 * 8)
// (8 + 4 * 8) + (4 + 8 * 8) + 5 + 6
// 8 * (9 * 6 * 2 + (8 + 8 * 3 + 8 + 8) * 7 * (8 * 9 + 8 * 5 * 4 * 8)) + 8 * 2
// 7 * 3 + 5 + (4 + (9 * 2 + 6 + 8) + 4 + 2)
// 9 * 3 + 3 + (7 * 2 + 2)
// 3 + 2 * (3 + 4 + 4 + 7) + 8 * (4 * (8 * 8 * 2 + 3 + 9 * 8))
// 7 + (4 + 2 * 5 + 7) * (9 * 9 * 4 + (9 * 4) + (9 + 2 * 7 * 3 * 9) + (3 * 7)) * ((5 + 6) * 6 + (8 + 7 + 5 + 8) + 6) + 8
// ((4 + 6 + 3 * 2 + 6) + 2) * (8 + 5 * 5 * 6 + 4)
// 5 * 2 + 7 * ((6 + 8 + 2 * 9 + 5 * 2) + 6 + (5 * 9) * (4 * 3 * 5))
// 7 + (3 + (2 + 8 * 4 + 4 + 8 * 7) + 5) * 3 * 3
// (5 + 8 * (2 + 5 * 3 * 9 * 6)) * 7
// (8 + (9 + 5 + 7 + 4 * 7 + 4) + 5) * (9 + 4 * 4 * 3 + 5 * 5) + 7
// 7 * ((3 * 8 * 8 + 6 * 6) + (7 * 7 * 3 + 2) + 7 + 2 * 9 * 7)
// (8 * 5 * 9 * 9 * (4 + 9) * 9) + (8 * 4 * (2 + 6)) + 8 * 9 * 2 * 4
// 8 + 5 + ((6 * 7) * 6 + 7 * 8) + 8 + 2
// 4 + (3 * 6)
// (3 + 9 + (4 * 7 * 8 + 8 + 2)) + 2 * 4
// 9 * (9 * 7) + 3 + 5 + (4 + 8) * 5
// 4 * 4 + 8 * (7 * 2 + 8 + 5 + (3 * 2 + 7 + 9)) + 5
// (8 + 5 * (6 + 3 + 6 * 9 + 8 * 2) + 8 + (5 + 3 * 8 * 6 + 3) * 6) * ((3 * 5 * 2) * (6 * 7) + 2) * 4 + (8 * 2 + 8 * 5)
// (4 + 5 * 5) + 5 * 9 * 5 * ((2 * 4 + 2 + 7 + 8 + 4) + 7 + 7) * 2
// 8 * (6 * 9 + 3 * 3 * 6) + 4
// ((8 * 5 * 8) * 9 * 4 + 3) + 6 * 4 * 9 + 3
// 5 * 3 * (8 + 2 + 2)
// 8 + 3 + 2 * (5 + (4 * 6 * 8) + (4 + 8) + 2 + 5 + (6 + 3))
// 2 + ((5 * 5 * 4) * 9 + 3 + 4 * 4 * 4) + 2 + 9
// 3 * 2 * 8 * (2 * 6) * 4
// 3 + 9 + (5 + 2 * 4 * 4 + 8) * 3 * 6 + (4 + 7)
// 2 + (9 + 9 * 6 + 9 * 9) + 2 + 2
// 5 * ((6 + 7 + 3 + 9) * 3 + 5 + 3 * 4 + (4 * 6 * 9)) + 2
// (8 + (3 + 5) + 7 * (2 * 4 * 4 + 8 + 2 * 4) * 5) * 6 + 5 * 2
// 6 * 4 + 4 + ((8 + 9) + 3 + 4 + 7) + 4
// (5 + 4 * 5 * 4 + 5) * 6 * (6 + 5 + 8 + 7 * 5)
// 3 * (5 + 8 + 2)
// ((4 + 7 * 7 * 4 + 7) + (3 + 5 + 6 * 3 * 7 * 9) * 9 + 4 * 5 * 3) + 2 * (2 + 2 * 2 * 6 * (7 + 8 + 7) * (7 * 7 * 8 * 6 + 5)) * 3 * 7
// 5 + (8 * 7 + 4 * 7 * (5 + 3 * 8 + 8 * 2)) + 2
// (9 + 7) * 5 + 9 * ((6 * 6 + 7 * 2 + 9 * 6) * 6 * 5 * 7)
// 3 * 9 + 9 + (9 + 3 * 9 + (6 + 2 * 9 + 8))
// 3 * 5 + ((6 + 5 * 6 * 5 * 6) + 7)
// 5 + 2 + (7 * 8 + 9 + 4 + 7 + 3) * (3 + 9 + 2 * 2 + 4)
// 5 * 5 + 6 + ((4 + 7 + 7 + 2 + 7) * (6 * 4 + 9 * 9 * 7 + 3) + 6 + 6 * 3) + (7 * 2 + 6 + (2 + 8 + 4 * 4 + 3) + 3 * 3)
// ((7 + 4) + 5 * (5 * 9) + 2 + 8 + 2) * 5 + 3 + 8 + 7
// 2 * (6 * 9 * 5) * 9 + 4 + 7
// 5 + (7 + 9 + (6 * 6 * 7) * 7 + 9 * 4) + 8 + ((2 * 9) * 8) + 8
// (9 * 7 * (2 * 9 + 2 * 5) + 3 + 6) * 5 + 8 * 7 + 4 * 8
// ((7 + 2 * 5) + 5 * 3 + 4 * 4) + 7 + 5 * (8 * 2) + ((9 * 6 + 2) * 7) * (9 + 3 + 7 * 8 * 7)
// (7 * (6 + 7 + 4 * 6 * 5) * 9) * 4 * (9 * 7 + (4 + 2 + 9 * 7) + 3)
// 5 * (4 * 9 * 3 + 5 + 8) * 4 * 4 + 2 + (3 * 8 * 7 + 4 * 7 * 9)
// (3 + 4 * 5) * 5 + 7 * (3 + 3 * 9)
// (4 * 3 + (4 + 6) + 2 * 7) + (9 + 2 * 9 * (9 * 8)) + 8 + (2 * 9 + 7) * 3 * 8
// 4 + (9 * 6 + (3 + 6 + 6 * 7 * 3)) + 8
// (6 * 9 * (4 * 4) * 6 + 5 + 3) + 6 + 6 + (6 * (6 * 5 + 4 * 7 * 8) * (4 * 4 + 3)) * 2
// (7 * 3 + 3 + 9) * (4 * 7 * 8 + 7) + (8 + 2 + 7 + (5 * 7 + 3) + 7) * (3 + 9) + 9 * (7 + 5 + 6 + 4 * 2)
// (8 + 6 + (4 * 7 * 6) * 2) + 4 * 5 * 8
// 3 * 7 + (3 + 2) * (5 * (2 + 9 + 5 * 4 + 9 + 2) * 7 * 8) * 2
// 9 * 9 * (6 + (4 + 3 + 9) + (9 + 5 * 3 + 6 * 7 * 4) * 8 * (8 * 4 + 8 * 7) + 9) + 8 * 4
// 2 * (7 * (8 + 6 * 9 + 3 * 6 + 6) + 2) * 4
// 7 + 4 * (7 * 7 + (8 + 2 * 4 + 5 * 9)) * (9 + 6 + 6) * 9 + 6
// 3 * (8 + 4 * (9 + 6 * 5 + 8 + 9) * 5 * 6 * 3) * 5 + 4
// (5 + 4 * 9 + 6 + (4 + 6 + 4 + 4)) + 5 * 6 + 4 + 8
// 9 + 3
// 5 * (4 + 2) + 4 * (8 + 8 * 4 * (4 * 9) * 4)
// 6 * (6 * 5 * 8 * 9) + (2 * 6 * 5 + 7 * 5)
// 7 + 2 + ((5 + 7 + 5) + (4 * 9 + 4 + 7) * 8 * 9) + 8 * 6 + (9 * 5 * 2)
// 8 * 7 * 8
// (8 + 6) + 5 + (7 * 3 + 8 * (6 + 7 + 9 + 8 * 3) + 9 * (3 + 7 * 5 * 9 * 3)) + 6
// 5 + 6 + 3 + 9 * 6
// ((3 + 9) + 6 * 8 + 8) + 5 + 4
// (4 + (8 + 6) * (7 * 2 + 3) * 6) + 5 * (7 + 5 * 4) * (8 * 2 * 7) * 3 + 6
// 4 * (4 + 4 * 2 + 3) * 5 * 6 + 6
// (4 * 4 + 9 + 7 + 4 + (9 + 6 * 7 * 4 + 4 + 8)) * 4 * 9 + 3
// 8 * 3 * 6 * 9 * (6 + 3 * 8 + 5 * (2 + 2 + 9 + 6))
// (2 * 7 + (9 + 8 + 6 + 8) + 9 * (7 * 7 + 4 + 3 + 2)) * 3 + 3
// 9 + 7 * (6 + 2 * 9 * (5 + 3 * 6 * 9 * 4) + (5 * 9 + 3 * 2 * 3 + 2))
// (5 + 7 * 2 + 9) * 7 + 8 + 8 + 5 + 2
// 2 * 9 * (9 * 8 + 8 * 2 * 3 * 2) * ((8 + 9 * 6 * 6) * 6) * 3
// (8 + 4 * 6 + 5 * 7) + 3 + 6 + 6 * 8
// 7 * 4 * 9 + (3 + 7 * 6 * 2 + 3 * 2) + 5
// 4 + ((8 + 4 + 9 + 2) + 7 * (2 + 8 * 8))
// 5 + 5 * (9 * 5 + (5 + 9 * 3 + 5 * 3 + 6)) * 8
// 4 + (3 * 5 * 6 + 4) + 9 * (8 * (3 + 8 * 5 * 2))
// 9 + (3 + (8 * 4 + 4) + 9 + 3) * (8 + 5 * (2 * 6) + 3 + 2 + 4) * 3 * 8 * 4
// 2 * (9 * 3 * 5 + (5 + 7) * (8 + 3 * 6 * 3 * 9) * 8) * 8 + (5 + 2 + 6 + 8 + (8 + 9 * 5 * 7 * 8 * 4)) * 7 * (8 + 9 + (7 + 2) + 8)
// 7 * 6 + (2 * 3) * 9 * 9
// 8 + (7 + (9 + 8 * 5) * 5 + 8 + 3)
// (4 + 5 * 3 * 7 + (2 * 8 + 9 * 7 * 3) * 8) + 6 + 9 + ((5 + 9 + 2 * 2 * 5 * 3) + 4 + 9 * 5) * 4
// 2 + 9 * (9 * 8 * 7 + 5 + 6 + 3) * 7
// 7 * 6
// (4 + 7 + 9) * ((2 + 4 * 3 + 7 + 9 + 8) + 3 * 3 * 8 + (8 + 3 * 5 + 7 * 2 * 9)) * 9 * 2
// (7 * 6 * 7) + 4 + (4 * 6) * 6 * (6 * 6) * 9
// ((4 + 2 * 5 * 6 * 2) + 5 + 6 + (7 * 8) * 6 * 6) + 5 * 6 * 6 + 9 * 3
// (8 * 6 * 5) + 2 + 4
// (4 * (6 + 6 + 8 + 2 * 4 + 6) + 9 + (7 * 7)) + 5 * 2 + (9 * 2 * 2)
// 6 + 3 * 5 + 8 + 3 * 5
// (5 * 5 + 2) * 5 + (3 + 3 * 8 + 2 + 7 * (5 + 8)) * 9
// (3 * (9 + 7 + 3 * 3 * 8) + 7) * 5 * 7 * 2
// (9 + 5) * 3 + 4
// 4 + 2 * 6 * (2 * (2 + 3 * 6 * 2) * 9) * 6
// (6 + (3 * 8 * 2 * 2 + 4) * 7 * 6) * 9 + 3 * (2 * 9 * (3 * 3 * 6 + 2 * 4 + 2) * 3) + 2
// ((5 + 5) * 6 * 6 * (9 + 5 * 6 * 7 + 4 * 8) * 2 * 2) * (3 + 5 + 2 + (9 + 3 * 6 + 4) + (9 + 7 + 9))
// (8 * (8 * 7 * 7) * 9 + 9 + (6 * 5 * 3 + 8) * 3) + ((9 * 9 * 8 + 5 + 9) + 8 * 6)
// 3 * 8 * (9 * 7) * 7
// (6 * (7 + 7 * 6 * 3) * 9 * 9 + 3 * 6) + 3 + 3 * 2 + 3 * 2
// 4 * 6 * 8 * 4
// 8 * (7 + 4 + (2 + 7 * 3 * 2 * 4))
// 6 * ((3 + 6 * 2 * 7 * 7) + 9 + 9 + 9 + 6)
// 2 * 4 * 3 * 8 + (5 + 7)
// (8 * (6 + 8) * 9 * 2 + 3) * 3 + 4 + 4
// (9 * 8) * 3 + 3 + 7 * 2 * (7 * 4 * 5 + 2)
// (4 * 6 * 3 * 5) + 3 * 9
// 3 * 4 * (6 * 6 + 8 + 3)
// 5 * ((4 * 4) + 6 + 8 * 9 + 2 * 4) * 3 * (4 + 4 + 8)
// 8 + (8 + 3 + 7 * (9 + 4 * 5 + 3))
// 8 * 8 + (3 * 8) * 6 + 3 * 4
// 7 + 7 + (3 * 5 * 6 + 9 + 4 + 9) + 7 * (7 * 8)
// (2 * 7 + 6) * 4 * 9 * 4 * 5 * 9
// (8 * 8 + 6 * 7 + (7 * 7 + 8)) * (3 * 6 * 3 * (4 + 5 * 2 * 8 + 4 + 5))
// 4 * (9 * (9 + 2 + 3) + 8)
// (4 * 7 * 8 * 6 + 7 * 2) + (6 * (2 + 7 * 9) + 7 + 9) * 9
// 3 * (8 + 5) * 3 + 6 + (4 + 9 + 2 + (7 + 2 * 9 + 2)) + (9 * 8)
// 7 * 7 + 4 * 9 + 7 + 5
// 4 * (9 * 8 + 6) + 3 + 3 + 6 * 9
// 4 + 9 * 8 * 2 * (2 * 6 * 3 * 5 + 8 * 8)
// 9 * 6 + 4 + 6 + (9 + 5 * 3 + 3 + (4 * 7 * 3 * 7 + 5)) + 4
// 9 + 2 + ((8 + 4 + 5 * 7 + 2 + 4) * 6 * (9 + 8) + 5 + 4 * (2 * 6 * 2 * 3 + 3))
// 3 * (7 + 2 + 4 + 9 + 8 + 4) * (5 * 5 + 9) + 3 * 2
// 4 * ((9 * 2 + 3 + 4 + 5) * 8 * 6 * 3 * 7) + 2 * (8 + (3 * 2 + 5 + 6 * 4 * 8) + 8)
// 5 + (5 * 2 * 3 * 6) + (7 + (7 * 3 * 7) + 9 + 9 + 5 + 7) + 6
// 8 * 3 + 6
// 8 * 8
// 2 * (3 + 5 + 4 + (8 + 5 + 6)) + 9 * 5
// (8 * 6 * 5 * 4 * 5) + 9 * (2 + (6 * 5 + 5 * 2) + (3 * 7 * 7 * 7 + 7) + 3 + 5) + (6 + 4 * 3 + 2) + (2 + 8 * 8)
// (6 * 3 * (2 * 2) + 3) * (5 * 2 * 5 * 2) * 7
// ((8 + 5) + 8 * 3 * (9 + 6 + 5 + 2 + 9 + 9)) + 6 + 9 * 6
// 2 * (4 * 6 * 8) + (6 * 8 * 5 + (3 * 4 * 2 * 4)) * ((2 * 8 * 6) + 2 + 5) + (2 + 2)
// 2 * 3 * 9 + 3 + 5
// 6 + 2 + 7 * 5 + 8
// 3 + 9 + 6 + 2 + 3 * 8
// 3 + ((5 + 6 + 7) * 5 * 9 * 6 * 7) + 8
// 7 * 6 * 9 * (7 * (8 * 4 * 8 + 2) * 3 * 8) + 8 + 5
// (2 * (4 + 5 + 6) * 7 + 9 * 9) + 7
// 5 * 5
// (7 * 3 * (7 + 3 + 4 + 9 * 3) + (4 + 7 + 9 * 6) + 9) + (3 + (5 + 3 + 7) + 2) * 5 + ((8 + 2 + 7 * 7) * 4) + 8
// (5 * 8 + (9 * 6 * 2) * 9 + 8 + 6) + (2 * 9) * 8
// (9 * (3 + 3 * 3 * 2) * 7 * 3) + 3 + 5 * 7 * ((6 + 2 + 6 + 5 + 3 + 6) * 7 * 8 * 9 + 3 * 8) + 3
// 9 * (3 * 9 + 9 + 8 + 3 * 7) + 8 + 9
// 6 + ((9 * 9 + 6 + 6 * 7) * 7 + 7 + 8) * 8
// 2 * 9 + (8 + 9 + 8 + 4 + 3 * 3) * (5 * 3 + 5 + 4 + 6 * 7) * (9 * 5 * 2 * 2 + 6 + 7)
// 7 * 7 * ((4 * 8 + 3 + 9) + 4 * (2 + 4) + 9) * 6 + 5
// 9 * (7 * 3) * 9 + 3 * 8 + (8 * 6)
// 5 + ((9 * 9 + 9) + 8 * 4 * 5 + 8) * (5 + 4 * 6 * 2 * 9)
// 3 * (6 * 4 + (6 * 9) + 5 * 6) + 9 + 9
// 2 + 9 + ((5 * 4 + 5 + 5 * 7 * 5) * 5 * (5 * 6 * 9 * 9 + 8) * 7 * 5)
// 5 * 6 * 2 + 4 * ((6 + 4 + 4 + 5 + 6) * (5 * 8 + 3 * 6) + 7 + (7 + 5 + 3) + 2 + 5) + 3
// 5 * 6 + (6 + 3 + 5 * 6 * (6 + 7 + 6 + 9 * 5)) * 8
// ((5 * 6 * 2 * 8 * 3) + (5 + 8 + 5 + 4)) * 2 + 9
// 5 * 4 + 4 + 7
// 8 * 9 + (9 * 7 + 8 * 9) * (9 + 4 + 3 + 8 * 5) + 8 * 5
// 4 * 6 * 2 + (6 + 4 * (7 + 5 + 9 * 5) + 5)
// (4 * 5 * 6 * 2 + 9) * 7 + (8 + (2 + 3 + 9 + 7 * 3 + 2) + (9 * 7) * 4 * 7 * 7) + 5 * 5 + 3
// 3 + 2 + (4 * 7 * 4 * (2 * 3 + 7) * 8 + 4) * 4
// 7 * (3 + 2 * 8 * (2 + 4 + 8 + 4 * 6))
// 7 + (5 + 5) + 2
// (6 + (4 + 4)) + 2 + 5
// 7 * 6 + ((9 * 5 * 6 * 4 + 9) * (9 * 4 + 8 * 2 + 9) + 8 + (2 * 6 + 4 + 2) * (3 + 9 * 2 + 7 * 5) * 3) + 6 + 6 * 4
// 7 * 8 + 9 * (6 * 7 * 3 * 5) * 8 * 7
// (9 * 7 * (9 * 4)) + 7 * 8 * 5 * 5
// (5 * 3 + 8) * 5 * (9 + 6 + (8 * 5) * 8 + 5 + 6) + 8 * 2
// (8 * 4 * 7 * 2 + (7 + 5)) * 8 * 4 * (3 * (4 + 8) * 6 * 8 + 8 + 2)
// 8 + 4 + 5 + (8 * 9 * 9 + 9 + 9) + 2 * (6 + 3 + 3 * 3)
// 5 + ((6 * 5) + 8 + 6) + (9 + 9) * 5
// ((7 * 7) * (4 * 3 + 5 + 6) + (8 + 7) + 6 + 7) * 8 * (2 * 9 + 8) + 4 * 4
// (4 * 7 + (4 * 2 * 3 + 3 + 7 + 3) + 3) * (8 + 6 + 6 * (6 * 3 + 5)) + 2 + 7 + 8
// 3 + 4 + 7 + (5 * 7 + 8 + 9) * (2 * 4 * 8 * 5) + 9
// 8 + 4 + (9 * (9 * 7 * 8 * 5 * 7) * 4 + (7 * 4) * 2 + 2)
// 6 + ((6 * 7 * 9 + 7 * 3) * 3 + 2 * 9 * (2 + 9 * 9 + 3 + 7))
// ((7 + 2 * 7 + 9) + (2 * 6) * (9 + 7 + 7 * 6)) + 9 * (2 + 9 + (3 + 7) + (7 * 4 + 4 * 4) * (8 + 6 + 7)) * 4
// 4 * 4 * 6 * 6 + 7 * ((5 + 6) + 9 + 3 * 2 * 8)
// 5 + 7 + (3 + 7 * (3 + 3) + 2) * 3
// 3 * 3 + 2 * (9 * (6 * 4 * 4 + 6) + 8 * 4 * 9 * 4)
// ((3 + 7 * 4 * 4 * 5) + (2 * 7 * 4 + 5 + 4 * 6) + 5 + 4) * 2 + 4
// (8 + 8 + (5 * 3 + 4 * 2 * 2 + 5) * 5) + 4 * 3 + 6 + 6 * (2 + 6 + 4)
// (5 * (4 + 5 * 3 * 3 * 6) * 6) * (5 * 8)
// 3 * 5 + (7 * 7 + 2 * 5 + (9 + 2 * 7 + 5 * 8 * 6) * 2)
// 7 + ((2 * 7) * 2 * 8 * 3 * (6 + 9 + 3 + 5) * 9) + (4 * 2 * 8 + 2)
// 5 * (9 + 3 + (9 * 2 + 4 + 9 * 2 + 4) * 6 * (2 * 3) + (5 * 9 * 2)) * (2 + (6 + 7 + 4 * 9 * 9 * 2) * 8 * (9 + 4)) + 2 * 5
// (6 + 2) + ((2 + 6 + 5) + 9 * 3 + 8) * 6 + 5
// ((9 * 2) * 7 * 4 * 3 * 8 * (2 + 7)) * ((8 + 2) + 8) * 3 + 5 * 7
// 4 + 5 * (6 * 2 + 5 * (8 * 7 * 5) + 8 + (9 + 8)) + 3 + (5 * 4 + 8) * 2
// 7 + 4 * 4
// 3 + (5 + 2 + 8 + 4 + 6 + (2 + 5 * 5 * 3 * 8)) + ((7 + 7) * 6 + (5 * 2 + 9 * 4 + 2 * 5)) + 4 + (3 + 2 + 8 * (2 + 4 * 4 * 5)) + (5 + (6 * 7 * 6 * 7) * 3)
// 6 + 4 + ((2 + 2 * 4) + 8) + 6 + (8 * 5 + (8 * 3 * 4 * 8 * 7) * 3)
// (2 + 7 + (3 * 9 + 8 + 3 + 5 + 5) + 4 + 2) * 9
// 3 + 6 * 9 * (8 * 3 * 8 + (9 + 3) + 3 + 3) + (9 + 7 + 8 + 3 + (3 + 3 + 4 * 5))
// 8 + ((6 * 7 * 8 * 2 * 4 * 8) + 3 + 7 + 7 * 3) * ((3 * 4 * 8 + 3 * 5 * 7) + 7 + 5 * 3 * (2 * 2 + 2))
// 6 * (4 * 3 + 5 * 3 + 4 * 9)
// ((7 + 6 + 4 * 9) * 4) + (5 * 2) * (7 * 7) + 7
// (3 * 9 * 8) + (7 * 4 * 9 * 9 * 4 + 7) + 2
// 9 * 9 * 9 * 5 + ((5 * 2) + 5 + 9 + 5 * 9)
// 3 * ((9 + 3 * 3 * 5) * 6 * 2) + 2 + 3 * (3 + 2 * 8 * 6 + 5 + 4) * 8
// 6 + (9 + (9 * 8 + 4 + 6 + 5) * (9 + 9 * 8 * 9 + 8)) * 4
// 3 * (4 * 2 * (3 + 9 + 3 + 2 + 9) + (7 * 5 + 4)) * 6 + (2 * 6 * 4) + 3 * 3
// (6 + 4 + 3) * 2 * 8 * 7
// 6 + 7 * 6 + (2 * 7 * (5 * 7) + 3)
// 5 * ((9 + 3 * 5) + (6 * 8) * 9 + 3 + 8) + 4 + 7 * 6
// 3 * 3 + ((7 * 6 + 9 + 6 + 4 * 9) + (4 + 8 + 2 * 9 * 3) * 6 * 4 + 4 * 8) * ((5 * 8 + 8) * 5 * 9 * 9 + (3 + 9 + 2 + 5 * 5 * 2) + (6 + 2 + 9 * 6)) + 7 + 2
// 4 + 2 * 9 * 5 + 8 * (8 + 9 * 8 * 2 * 3)
// ((7 + 2 * 7 * 5) * (3 * 8 * 8 + 4 + 2) * 4 * 4 * 6 + 9) * 2 * (5 * 2 + 3 * 9) + 8 + 8
// 9 * 4 * 3 + 6 + (6 + 3 * 9 * 5 + (6 + 2 + 3 * 8) * 8) + (7 * 6 * 2)
// 8 + (6 * 7 + 7 + 9) + ((7 * 8 + 3 * 6 + 5) * 8) + 6
// (3 * 9 * 9 + 6) * 6 * 9 + 4
// 3 * ((5 + 3 + 6 + 4 * 4 + 2) + 6 * 2) * 8
// 7 * 8 * 3 * 4 * ((4 + 8 + 4) + 3 + 4 * (4 + 6 * 3 + 8 * 8) + 4 * 2)
// 5 + (7 + 6 + 8 + 3 + (8 + 2 + 8 * 8 + 3)) + 7 * 4
// 8 + 7 + 6 * 5
// 8 * ((2 + 9 * 4 * 4 * 8 + 9) + 3 + 4 * (4 + 5 * 9 + 6 + 2 + 6))
// 8 + (5 * 5 * 6 * (3 + 6 * 8) + (5 * 2 * 8 * 7)) + (6 * 4 * 2)
// 5 + 5 + ((4 + 2 + 6 * 3 * 3 * 4) * (8 + 6) * 4 * 9 + 8 * 6)
// 2 + (9 + (7 + 6) * 7 * 8) + 7 * (9 + 3 * (8 * 4 + 2) + 7 + 9) + 2
// 9 * 6 + 5 + 9 + (8 * 6 + 4) * (5 * 4 + 7 * 2 * (3 + 8 * 7 + 4 + 6 + 5))
// 3 * (9 + (2 * 9 + 6)) + 6 * 9
// (6 * 8 * 8 + 2) + (2 + 5 + 4) * 9 + 6
// 3 * (5 + 4 * 5 + 8 * (2 * 3 * 4 * 6 * 6))
// 8 + 2 + 7 * (2 + 6) + (2 * 2 * 5 * (7 + 8 * 6 * 2 * 8 + 3))
// 3 * (7 * 5 * 9 * (2 * 5 * 8 + 2 * 3) * 7)
// 7 * (9 + 7 * 5 + 2 * 7) * (6 * (6 + 5 * 2)) * 5 + 5 + 3
// (6 * (8 + 6 * 2 + 7) + 7 + (9 * 5 + 4 + 7 + 8) * (6 + 4 + 6 * 6 * 8)) * 2 * 9 + 7 + 6 * 4
// 6 + (5 * 5 + 3 * 5 + 2 + 9) + 8
// 3 + 3 + ((4 + 4 + 2 * 5 + 2) + 7) + 2 * 6
// 2 + 9 + 8 + (6 * (4 + 2 + 8) + 2)
// 8 + (7 + 8) * 2 + 9
// 7 * 9 * 3 * (3 * 2 + 7 * 4)
// 4 * (5 * 5 * 6 + 9 + 2)
// (6 * 6 * (3 + 4 * 6 + 7 * 6) + 5 * 9) * 3 * ((4 + 5 + 7 + 5) * 9 * (5 * 6 * 4 + 7 + 6 * 8) * 2 * 2) * ((9 + 7) * 4) + 7
// 9 + 4 * ((3 * 9) + 6) + 8
// (6 * 9 + (5 + 3 * 2 * 7) + 8 * 3) + (7 + 9)
// 9 * (5 * (7 * 9)) + 7
// 8 * ((4 + 6 + 9) + 7 * 9 * 2 * 2 * 8) + 7 * (3 * 6 + 3 * 7) + (2 + 7 + (4 + 2 * 5 * 5 * 6 * 5)) * 2
// (9 + 2 * 5 * 9 * (9 * 7 * 9 * 6)) + (2 + 2 + (2 + 6 * 7 * 7) * 3 + 2) * ((4 * 7 + 2 + 5 * 6) + (6 * 8 + 9 * 7)) + (5 + 6 + 9 + 4 * 6)
// 9 + 7 * 9 * (9 * (9 + 7 + 8) * 2 + 8 + 4 * 4) * (2 + 8 * 6 * 9 * 8 + 4) * 3
// ((7 + 6) * 5) + 8
// (2 + 9 + 6 * 3) + 9 * 5 * ((8 + 7 * 2) + 7) * 6 + 4
// (7 + 3 * 7 + 8 * 9) * 5 * 7
// 2 + ((2 + 3) * 2) + 8 + 7
// 2 * 4 + 5
// 3 * ((9 * 8 * 6 + 3 * 9) + 9 * (3 * 5 * 8 * 6) * 5 * 4) + 2 + ((3 * 7 * 5 * 5 + 4 + 6) + 3 * 2 * 8)
// 2 * 6 + 3 + (4 + 8 * 6) * 8
// 5 * 9 + 7 + (8 + 6 + 2 + 9) + 3
// 8 * 2 * 6 + (3 + (9 * 6 * 2 + 6 * 2 * 2) * (8 * 8 * 7 + 6)) * 4
// 6 * 4 * 3 * 6 + (7 + 3 + 6)
// (7 * 3 * 9 * 7 * 4 * 3) * 5 + 7
// 7 + 8 + 8 * 5 + (5 * 4 + 5 * (6 * 5 * 6) + 8)
// (2 + 3) * 8 + 2 * 8 * 7 * 2
// (6 + 5 + 5 + 7 * (4 + 3 * 2 * 2 * 8)) + 9 * 5 + 7
// 2 + (9 + 3 * (8 + 6) + 8) * (3 * 6 + (3 * 3 * 3 + 2))
// 7 * 8 + 2 + (3 * 3 * 4 * (2 + 9) * 9) * 7 + 2
// 6 * 8 + 5 + 6 * (3 * 8 * (3 + 8 + 9 + 7)) * (4 + 5 + 9 * 5 + (8 + 4 + 7) + 5)
// ((7 * 4 + 4) * 7 * (5 + 3 * 2 + 4 * 6 * 5) * 2) * 7 * 9 * (5 * 4 + 6 + 2) + 9
// 2 + 6
// 3 + 5 * 8 * ((9 * 6 * 3 * 8 + 7) + 8)
// 7 * 4 * 8
// (4 + 9 + 8 * 9 + 7 + 7) * 9
// 2 * 2 * 2 * (2 * 6 * 3 * 5 + 9) + (2 * 8)
// ((6 + 8 * 9 * 2 + 9) + 2 + (3 + 2 * 3) + 2 + 8) + 8 * 8 + (4 + (3 * 8) * 9) * 3 + 5
// 6 + 5 * 8 * 7 + 3 * 3
// 9 * (6 * 2 * 5 + 5 * (2 + 6 * 7) * 2) * 9 + 7
// 3 + (6 + 2 * 8 * 3 + (4 * 9)) + 8 + 4 * (5 + 6 + (3 + 9 + 9 + 4 + 3 * 9) * 5 + 2) + 7
// 5 + 9 * (6 * 9 + (7 + 3 * 9) + 8) * 7
// 8 * ((2 * 3 + 3 + 6 + 3 * 7) * 3) * 2
// 5 + 2 + 8 + (2 + 5 * 7 + 9 + 2) * 3
// 9 * 5 + 3 + (8 + 2)
// 2 + 9 * (3 * (5 + 7) * 5 + 3) * ((8 * 5 + 4 * 7) + 6) + ((2 * 5) * 2 + 7) + 8
// 5 + (4 * 9 + 7) + 9
// (4 + 8 * 3 + (2 * 5) + 8) + 2 + 2 * 4 * 2 * ((2 * 2) * (2 * 9 + 2) * 6)
// 5 + ((4 * 2) * 2) * 3
// (8 * (3 + 4 * 9 + 9 + 4 * 5) + 3 + 5) + 3 * 4 + 2 * 9
// 9 + (2 * 2) * 2 + (7 * 3 * 7 + 4) + 5
// 5 + 6 * (6 + 6 * (4 + 5 * 5 * 3 * 4) * (8 * 9 + 4) * 7 * (8 + 8 + 9 + 3))
// 3 * (5 + 3 + 7 * 9 + 3 + (3 * 5)) * 3 + (7 * 8 * 5)
// (2 * (4 * 5 + 5 + 9 + 9) * 5 + (9 * 6)) * 5 * 5 + 4 * 3 + (5 * 8)
// 6 + (4 + 2 + 5 * (8 + 5 + 6 * 5 * 6 + 6)) + 5 + 5 + 8
// ((2 * 4 + 6 * 5) * (5 + 6) + 9 + 9) + 6 * 2 + 3 + 3 * 9
// 2 + 7 * 2 * 4 * ((2 * 6 + 2 + 2 * 4) * 5) * 7
// 9 * 3 + (4 * 4 + 4 * 9) * 7 * 2
// 7 + 5 + 7 * (6 * 4 * 5 + 3 * 9)
// (9 * 7) * 3 + 2 * 8
// 2 * 8 + 4 + 9 * 9
// 5 + (7 + 4) + 8 + (4 + (4 + 8 * 4 * 2) + 7 + 5) + 9 * (3 * (5 * 8 * 7))
// 5 + 5 + 9 + (6 * 9 + (9 + 3 * 9 * 3 * 3) * 4) * 9 * 7
// (4 * 7 * (9 * 7 + 3) * (8 + 3) * 3 * 9) * 9
// 3 * (9 + 6 * (3 + 2 * 3) + 7 * 2) * 9 * 9
// 2 * 9 + (4 + 9 + (3 * 9 * 8 * 5 * 9)) + (8 * 6 + 2 + 7 + 9) * 6 + 8
// (8 + 5 * 5 * 5) * 2 * 8 * (4 * 3 * 3) + 3
// 7 * ((2 * 4) + 3 + (3 + 8 + 9 * 6) + 3 * 9 + 7)
// (2 * 7 + 7 * 8) * 3 * (3 * 7 * 9 * 9 * 5 + 2)
// (2 * (3 * 5 + 8)) * (8 * 4 + (6 + 2 * 2 + 7) + 3 + 2) * 9 + 3 + 4
// 9 + (4 * 5 + 2 * 5 * (5 + 4 * 9 + 3)) + 9 + 9 * (4 + 4 * 8 + 4)
// 8 + (2 * 4) + (8 + 4) * ((6 + 3 + 4 + 4 + 7) * (7 + 6 + 3 + 3 * 3 * 6)) * 6
// 3 + 6 + (2 * 7 * 2 * 2) + 5
// ((2 + 7) * 9 + 5) * 5 + ((3 * 9) + (9 + 7 * 6) + (7 + 4 + 7 + 4) + 7) * 3
// 5 + 2 * 5 * 9 + (6 + 7 + 8 + (2 + 3 + 6 + 6 * 6 * 7) * 8 + 6) * 4
// 3 + (4 * 2 * 7 + 8) * 5
// 2 + 9 + 3 + 2 * 3
// (5 + (5 + 7 * 5 + 6 + 5) * 3 * 3 * 8) * 4
// 3 * 9 * 7 + (8 * 8 * (4 + 5) + 4 * 2) * (7 + 8 * 4 + 5 + 2 * 2)
// (3 + 6 + (7 + 6 * 2 + 2 * 6 + 5) + 8 + (5 * 7 + 5 + 9)) + 2 + (2 + (2 + 3 * 3 + 2 * 9) * (4 + 9 * 7 + 3) + (5 * 9 + 6 * 3 + 3 + 9) + 8) * 4 * 8
// (6 * 8 * 9 + 3 * 4) * 5
// 6 * 9 * 7 * 2 * (7 + 4 + (5 + 6 + 7 * 4 * 3) * (2 + 7 + 2 * 6) * 8)
// 9 * (8 + 4 + 6 * (8 * 8 * 4) * (8 * 2 + 4) * 8) * 2
// 6 * ((2 + 6 * 7 + 5) + 2 * 4 + 6 * 8 * 4) * 2 + 4 + (4 * 2 * 3 + 9 + 3 * 6) + 4
// 9 * (6 * 5 + (7 * 8) * (2 + 7 * 3 + 3 + 4 * 6)) + 6 * 5 * 6 + 9
// 9 * (7 + 4 * 6 * 4) + 3 * ((9 * 5 + 4) + (8 + 8 + 6 + 2 + 3 + 7)) + 8 * 9
// (6 + 6 + 2 + 3) * (3 * 3 + 3 * (9 + 8 + 4) + (8 * 8 + 2 * 4 * 3))
// 9 + ((7 * 7 + 9 * 3) * 4 + 4 + 3) + 8 * 6 * (2 * (2 * 9 * 8 * 2 + 3 + 2) + 3 * 3 * (6 * 8 + 3 * 3))
// (7 * 4 * 6) * (5 * 5) + 8 * 7 * 5
// ((5 + 9 + 6 + 5 + 4) + 6 * 9 + 5 + 4) * 2 * 4 * 8 + (7 + 5 * 5 * (8 + 6 + 9 + 7 * 6 + 8) * 3)
// 9 * ((4 + 6) + 2 + 5)
// (5 + 6) * (2 + (9 * 5 + 9) * (9 + 6 * 3 + 4 * 5 * 7) + (6 + 8)) + ((8 + 2 + 5) + 5 + 5 + 8) + (4 + (8 * 3 + 5 + 3 + 8 + 6) * (8 * 3 + 5 * 7 * 8) * 3 + 7 * 7) + 8 + 6
// 6 + 6 + (4 + (4 * 6 * 3) + 2 + 5 * 4) * 6
// 4 + (8 * 3 + (6 + 2)) * (6 + 8 + 7 + 2 * 4 * 9) * (5 + (5 * 4 * 3 + 7 + 7 * 8) + 8 * (9 * 5 * 9) + 9) + (4 + 8 + 4 + 8) + (9 * 9 + 8 * 3)
// (5 * 2 * 8 * 3) * 5 + 5 + 8 + 9
// 6 * ((4 * 3 + 2 * 5 * 4 * 6) + 4) + 3 * 6
// 9 * 5 + (9 + 7)
// 8 * 2 * 5 * 6 + (6 * 3 * 5 + 4 * (4 * 4 * 4 * 2 + 6) + 4)
// 6 + (3 + 7 + 8 + 8) * 9 * 6
// 2 + 5 * ((4 * 2 + 6) * 5 * (6 * 2 + 4 * 8 * 6) + 8) * 8 + 6
// 4 + 5 * ((4 + 2) + 3 + 5 + (4 + 5 * 3 * 6 + 6) * (5 + 9 + 9 + 6 * 4 + 7) + 8) * 5 * 5
// 6 * (5 + 4 + (3 + 3 * 3 * 8 * 3) * (2 + 3 * 2 * 2) * 5 + 7) + 2 * 2 * 6 + 9
// ((3 + 8 * 7 + 3 + 3 + 3) + 3 + 8) * 5
// 4 + 9 + (9 + 5 * 4 * 8 * 2 + 4)
// 5 * (4 + 8 + 9 * 5) * ((6 * 9 * 9 + 2 * 5 * 8) * 9 * 2 + (9 * 3 + 4 + 7 + 3 + 2) * (6 * 7 * 5 + 2 * 9 * 2) + (7 * 9 * 4 * 2 * 3)) + 9
// 7 * 6 + (4 * 4 + (7 * 9 * 6) * (9 + 7) + 5 + 6)
// 8 + (5 + 4 + 9) + 7 * (5 * 8 + 3 * 5) * 9
// 8 + (6 + 9 * 8 * 8) + (9 + 7 * 9 + 5 * 7 + 3)
// 4 + (6 * 6) * 6 + 2 + 4
// (9 * 2 + 3) + 4 + 6 + 7 * (2 * 4 + 8 + 5) * 4
// 5 * 6 + 9 + 7 + 3 * 2
// 5 * 3 * 5 * ((9 + 8 + 9 + 3) + 6 * (9 * 4 * 2 + 5) * (9 + 9 * 3 + 4))
// 5 * (3 * (7 + 7 + 8 + 2 * 7 * 9) + 5 + 9) + ((9 * 5 + 4) * 7 * 8 + 3) * 7 + (3 * 8 * (4 + 6 * 2 * 3 + 7 * 8) * 7 * (7 + 4) * 5)
// 5 * (8 + 3 * 6 * 2) * 9 + 6 * 2 * 5
// 6 * 4 * 2 + 5 * (9 + 4 * 8 * 3 + 8)
// 4 * ((6 + 5 + 9 * 9) * 6 * (9 + 7 + 2 * 6 + 2) + 2 + (5 * 4 * 4) + 5)
// (8 * (9 * 2 * 4 + 5) * 4 + 9 * 8 * (3 * 6 * 9 + 3 * 8)) * 4 + 5
// (5 + (3 * 7 * 8 + 6)) * 4
// (4 + 5) + 8
// 8 * 8 * (2 * (7 * 5 + 7) * 4 + 8) + 2 * 8
// 5 * 9 * (6 * 4 * 6) * 7 * 9 + 2
// 2 + ((5 * 4) + 5 + (8 * 9 * 9 + 2 + 9 * 9) + (8 + 4 * 2 + 6) + 8)
// (6 * 2) * 4 + 4 * (8 * 5 + 3 + (3 * 5 + 7 + 3 + 5 * 5)) * 2 + 5
// 3 * 8 + 3 + (6 * (3 * 7 * 4 + 8) * (6 * 2 * 8) + 6 + (5 * 2) * 8) + 7
// 2 * 8 + 6 * 4 + (5 + (9 * 3 * 4 * 2)) * (4 + 6 * 9 * 8 * 7 + 4)
// 7 + 6 * (4 * (2 + 8 + 5 * 8 + 3)) + 4 + 2
// ((3 + 8 + 3 * 6) + (2 + 5 * 7) * 4 + 6 + 7) + (2 + 3 * 6 * (7 + 2 + 7)) * 6 + 2
// 8 + 4 * 9 * 3 + (5 * 2 * (9 * 3 * 2)) * 6
// 6 + 7 * (8 + 5 + (2 + 3)) + 5 * 5 + 9
// 5 * ((6 + 3 * 3 + 6 + 2) + (8 * 9 * 9) + 7)
// 3 + (7 * (3 + 7 + 7 * 3 * 4) + 5 * 7 * (8 + 4 + 6 * 9)) * 2 * 7
// (9 * 6 * (4 * 9 + 6 * 6)) + 8 * (5 + 8 + 5 + 4 * 2 + 3)
// 3 * (8 + 8 + 7) * (7 * 2 + 4) + (7 + 9)
// ((9 * 5 + 6 + 9) + 9 + 8) + 3 + 9 * 6 * 8
// ((8 + 5 * 2) + 4 + 8) + (2 * 5)
// (6 + 6 * 8) + 4 * 3 + (8 * 2 + 2 * 3) * (7 * (8 * 4)) * 9
// 6 * (9 * 5 + 5 * 3) + 8 + ((8 + 3) * (3 + 5 * 7 + 9 * 9 + 2)) + 6 + 2
// (7 * 7) * ((3 * 7) + 9 + 4) + (4 * 9 * 8 * 6 * (2 + 4 * 4)) + 5
// 4 * 3 + 6 * 8 * 5 * (4 * 7 + (5 + 5 + 5 + 3 + 5))
// (2 + 6 + (6 * 5 + 4 * 8) * 3 + 2) + 6 + 3
// (4 * 5 * 7 * 6 + 6 + (2 * 8 * 6 + 2 + 9)) + 4 + 7
// 9 * 4 * 5 + 2
// `
const input = puzzleInput
  .split('\n')
  .filter(i => i.length) // ignore blanks
console.log("lines: ", input.length);

/** State wielding history tracker - an HOF function w/ 'history' property. */
function historyReduce(reducer) {
  return (prior, value, index, array) => ({
    history: (prior && (prior.state && [...(prior.history || []), prior.state]) || [...(prior.history || [])]) || [],
    state: reducer(prior.state, value, index, array),
  });
}

function tapper(reducer, tap) {
  return (state, value, index, array) => {
    const next = reducer(state, value, index, array);
    tap(next);
    return next;
  }
}

function repeat(n, action, state) {
  console.log('repeat',n);
  return n > 0 ? action(repeat(n-1, action, state), n) : state;
}

// Lexical Tokens
const NUMBER = 'NUMBER';
const PUNCTUATION = 'PUNCTUATION';
const OPEN_EXPR = '('
const CLOSE_EXPR = ')'
const BINARY_OP = 'BINARY_OP';
const MULT = '*';
const ADD = '+';

const LEX_CLASSES = {
  NUMBER: { re: '\\d+', type: () => NUMBER, value: Number },
  BINARY_OP: tokenMapped(MULT, ADD),
  PUNCTUATION: tokenMapped(OPEN_EXPR, CLOSE_EXPR),
};

function tokenMapped(...token) {
  return {
    re: `[${token.join()}]`, // all are single char
    value: op => op,
  }
}

LEX_CLASS_KEYS = Object.keys(LEX_CLASSES);
LEX_RE = new RegExp(`\\s*(?:${Object.values(LEX_CLASSES).map(c => `(${c.re})`).join('|')})`, 'g');

// AST
class Value {
  constructor(value) {
    this.value = value;
  }
  eval() { return this.value; }
  toString() { return this.value.toString(); }
}
class Binary {
  constructor(left, op, right) {
    this.left = left;
    this.op = op;
    this.right = right;
  }
  eval() {
    const expr = `${this.left.eval()} ${this.op} ${this.right.eval()}`;
    console.log('evaluating: ', expr, '=', eval(expr));
    return eval(expr);
  }
  toString() { return `(${this.left} ${this.op} ${this.right})`; }
}

// TODO: optimize, so `matchAll` is called only once per input, use next(i) to move around
function Tokenizer(input) {
  function *generator(input) {
    for (const m of input.matchAll(LEX_RE)) {
      // console.log(m); // only 1 group should match
      let i;
      for (i = 0; i < LEX_CLASS_KEYS.length; i++) {
        if (m[i + 1]) { // non-empty string, thus falsinees irrelevant
          // console.log('tokenMatch: ', i, m[i + 1]);
          const type = LEX_CLASS_KEYS[i];
          yield {type: type, value: LEX_CLASSES[type].value(m[i + 1])};
          break;
        }
      }
      if (i >= LEX_CLASS_KEYS.length) {
        throw new Error("Cannot parse token: " + input);
      }
    }
  }
  const iter = generator(input);
  let current = null;

  this[Symbol.iterator] = () => generator(input);
  this.peek = () => (current || (current = iter.next())).value;
  this.consume = () => {
    const result = this.peek();
    current = (current.done ? current : null);
    return result;
  };
  this.skip = (type, value) => {
    const token = this.peek();
    if (token.type !== type || token.value !== value) throw new Error('expected ' + type);
    else return this.consume();
  };
  this.eof = () => (current || (current = iter.next())).done;
}

function parseEnclosed(tokens) {
  tokens.skip(PUNCTUATION, OPEN_EXPR);
  const ast = parseExpression(tokens);

  let token = tokens.peek();
  if (token.type !== PUNCTUATION || token.value !== CLOSE_EXPR) {
    throw new Error(`Expected '${CLOSE_EXPR}'`)
  }
  tokens.skip(PUNCTUATION, CLOSE_EXPR);
  return ast;
}

function parseValue(tokens) {
  let token = tokens.peek();
  if (token.type === PUNCTUATION && token.value === OPEN_EXPR) {
    return parseEnclosed(tokens);
  } else if (token.type === NUMBER) {
    return new Value(tokens.consume().value);
  } else {
    throw new Error(`Unexpected '${token}'`)
  }
}

function parseExpression(tokens) {
  let value = parseValue(tokens)

  while (!tokens.eof()) {
    const token = tokens.peek();
    if (token.type === BINARY_OP) {
      value = new Binary(value, tokens.consume().value, parseValue(tokens))
    } else {
      return value;
    }
  }
  return value;
}

const state0 = {
  equations: [],
  sum: 0,
};

// let state = input.reduce(historyReduce(readLine), { state: state0 });
const answer = input.map(input => new Tokenizer(input))
  .map(tokens => console.dir([...tokens], {depth:null}) || tokens)
  .map(tokens => parseExpression(tokens))
  .map(ast => console.log(ast.toString()) || ast)
  .map(ast => ast.eval())
  .map(result => console.log(result) || result)
  .reduce((sum, result) => sum + result, 0);

const success = answer === stateInit.expected;

console.dir({
  answer, expected: stateInit.expected, success,
}, {depth: null});
